{"name":"Pairwise Test Generator","tagline":"PTG - Pairwise TestCase Generator","body":"# PTG â€“ PAIRWISE TESTS GENERATOR\r\nPTG is a desktop application that was created for the automatic generation of a test case matrix covering of all t-wise combinations of input parameter values of a test scenario model described in a formatted text file. \r\n\r\n## PTG features:\r\n- Variable name aliasing\r\n- Sub-models\r\n- Constraints\r\n- Configuration of the size t of the t-wise combination\r\n- The ability to analyze the coverage of a pre-existing test case matrix\r\n \r\nThe PTG project aims to provide SW testing professionals with an automatic, simple-to-use desktop application that resolves the task of generating a selection of a sub-set of test cases from all possible combinations of test cases in such a way that all possible t-wise combinations are covered in an effectively minimal test case count with the premise of least redundancy over the parameter values.\r\n\r\nPTG makes use of a custom generation algorithm that is based on [AETG](http://aetgweb.appcomsci.com/papers/1997-tse.html) and Jacek Czerwonka's [PICT](https://github.com/microsoft/pict) algorithm. PTG applies custom additions to the above mentioned with the intention of extending the functionalities initially provided in a language that is more suitable to the current state of the art.\r\n\r\nPTG uses PICTs context free grammar for the description of the input model for the application.\r\n\r\n## Algorithm Description:\r\n\r\nThe generation algorithm has two different phases: (1) preparation phase and (2) generation phase. In phase (1) the tool parses the input file and generates all the logical structures required for the generation of the test cases. Phase (2) uses a greedy heuristic in order to build one test at the time, locally optimizing the solution. It is similar to the algorithm used in AETG   with key differences being that PTG algorithm is deterministic and it does not produce candidate tests. By supporting constraints, variable name aliasing sub-modeling and coverage analysis PTG provides the tester all the tools to implement t-wise test methodologies in his project.\r\n\r\n### Authors and Contributors\r\nFounder: Ariel Silverman (@asilverman)\r\n\r\n### Support or Contact\r\nHere is where the contact info comes in\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}